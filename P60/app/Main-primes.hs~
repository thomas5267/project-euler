{-# LANGUAGE TupleSections #-}
module Main where

import Euler.Helper

import Data.Numbers.Primes

import Data.IntSet qualified as IS

import Control.Monad

globalBound :: Int
-- [8389, 6733, 5701, 5197, 13] is one set of primes with 5 elements
-- satisfying the prime pair property.
-- The sum of this set is 26033.
globalBound = 26033

testBound :: Int
testBound = 10^(4 :: Int)

bound :: Int
bound = globalBound

inputPrimes :: [Int]
-- A guess that the largest element of the set of five primes is below 100000
-- 2 and 5 cannot be a part of prime pairs.
-- Any number with a least significant digit of 2 or 5
-- must be divisible by 2 or 5 respectively.
inputPrimes = deleteOrd (takeWhile (<= bound) primes) [2, 5]

isPrimeQuick :: Int -> Bool
isPrimeQuick = (`IS.member` primesSet)
  where
    primesSet = IS.fromAscList $ takeWhile (<= concatDigits bound bound) primes


-- Although it is given that [3, 7, 109, 673] is a set of four primes
-- which satisfies the prime pair property, it could very well be the case
-- that it cannot be extended to a set of five primes.
-- Thus, we cannot use this set as a starting point.

concatDigits :: Int -> Int -> Int
concatDigits a b = a*mul + b
  where
    mul = findMul 1
    findMul m = if m > b
                then m
                else findMul (10*m)

isPrimePair :: (Int, Int) -> Bool
isPrimePair (a, b) = isPrimeQuick (concatDigits a b) && isPrimeQuick (concatDigits b a)

addPrime :: [Int] -> [[Int]]
addPrime xs = if null addablePrimes
              then []
              else map (:xs) addablePrimes
  where
    possiblePrimes = dropWhile (<= maximum xs) inputPrimes
    addable :: Int -> Bool
    addable n = all (curry isPrimePair n) xs
    addablePrimes = filter addable possiblePrimes

extendPrimePairs :: Int -> [Int] -> [[Int]]
extendPrimePairs size = foldr1 (>=>) (replicate (size-1) addPrime)

primePairs :: Int -> [[Int]]
primePairs size = concatMap (\ p -> extendPrimePairs size [p]) inputPrimes

distributeForward :: [a] -> [(a, a)]
-- E.g.: distributeForward [1,2,3,4] = [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]
distributeForward []     = []
distributeForward (a:as) = ((a,) <$> as) ++ distributeForward as

possiblePairs :: [(Int, Int)]
possiblePairs = filter isPrimePair $ distributeForward inputPrimes



main :: IO ()
main = print $ primePairs 5
