module Main (main) where

import Euler.Helper

import Data.Bifunctor
import Data.Char (digitToInt)
import Data.List (sort)
import Data.Maybe


import Data.Int
import Data.Vector.Unboxed qualified as U
import Data.Vector.Unboxed.Mutable qualified as MU
import Data.Bits
import Data.Bit.ThreadSafe

-- import Data.Vector qualified as V
-- import Data.Vector.Algorithms.Insertion qualified as V.IS

import Control.Applicative
import Control.Monad
import Control.Monad.ST
import Control.Monad.State
import Control.Monad.Except



newtype Row = Row (Int, Int)
    deriving (Show, Eq, Ord)

newtype Col = Col (Int, Int)
    deriving (Show, Eq, Ord)

newtype Box = Box (Int, Int)
    deriving (Show, Eq, Ord)


class SudokuIndex i where
  sudokuIndexer :: i -> Int
  byRow :: i -> Row
  byCol :: i -> Col
  byBox :: i -> Box


instance SudokuIndex Row where
  sudokuIndexer (Row (r, c)) = 9*r + c
  byRow = id
  byCol (Row (r, c)) = Col (c, r)
  byBox = rowToBox
  {-# INLINE sudokuIndexer #-}
  {-# INLINE byRow #-}
  {-# INLINE byCol #-}

instance SudokuIndex Col where
  sudokuIndexer (Col (c, r)) = 9*r + c
  byRow (Col (c, r)) = Row (r, c)
  byCol = id
  byBox = rowToBox . byRow
  {-# INLINE sudokuIndexer #-}
  {-# INLINE byRow #-}
  {-# INLINE byCol #-}

instance SudokuIndex Box where
  sudokuIndexer = sudokuIndexer . boxToRow
  byRow = boxToRow
  byCol = byCol . boxToRow
  byBox = id
  {-# INLINE sudokuIndexer #-}

boxToRow :: Box -> Row
boxToRow (Box (b, i))
  | i < 3     = Row (br, bc+i)
  | i < 6     = Row (br+1, bc+i-3)
  | otherwise = Row (br+2, bc+i-6)
  where
    -- (br, bc) is the index for top-left corner of the box.
    (m, n) = b `quotRem` 3
    (br, bc) = (3*m, 3*n)
{-# INLINE boxToRow #-}

rowToBox :: Row -> Box
rowToBox (Row (r, c)) = Box (3*m + p, 3*n + q)
  where
    (m, n) = r `quotRem` 3
    (p, q) = c `quotRem` 3
{-# INLINE rowToBox #-}


rowIndex :: (SudokuIndex i) => i -> Int
rowIndex = (\ (Row (r, _)) -> r) . byRow
{-# INLINE rowIndex #-}

colIndex :: (SudokuIndex i) => i -> Int
colIndex = (\ (Col (c, _)) -> c) . byCol
{-# INLINE colIndex #-}

boxIndex :: (SudokuIndex i) => i -> Int
boxIndex = (\ (Box (b, _)) -> b) . byBox
{-# INLINE boxIndex #-}


type SudokuChoice i = (i, Value Sudoku)

class SudokuShaped s where
  type Value s
  (!) :: (SudokuIndex i) => s -> i -> Value s
  update :: (SudokuIndex i) => s -> [SudokuChoice i] -> s


-- Sudoku is reserved for a 9x9 grid.
-- I am sure the size of the array can be statically typed
-- but I am not sure whether it is worth my time to do so.
newtype Sudoku = Sudoku { unSudoku :: U.Vector Int8
                        } deriving (Show, Eq)

instance SudokuShaped Sudoku where
  type Value Sudoku = Int8
  s ! i = unSudoku s U.! sudokuIndexer i
  update s xs = Sudoku $ unSudoku s U.// map (first sudokuIndexer) xs

sudoku :: [Int8] -> Sudoku
sudoku xs = Sudoku $ U.fromList xs

rowIndices :: [Row]
rowIndices = [ Row (x, y) | x <- [0..8], y <- [0..8] ]


newtype SudokuSlice = SudokuSlice { unSudokuSlice :: U.Vector Int8
                                  } deriving (Show, Eq)

row :: Sudoku -> Int -> SudokuSlice
row s r = SudokuSlice $ U.slice (9*r) 9 (unSudoku s)

col :: Sudoku -> Int -> SudokuSlice
col s c = SudokuSlice $ U.backpermute (unSudoku s) (U.enumFromStepN c 9 9)

box :: Sudoku -> Int -> SudokuSlice
box s b = SudokuSlice $ U.backpermute (unSudoku s) indexVec
  where
    indexVec = U.generate 9 (sudokuIndexer . Box . (b,))


test :: Sudoku
test = sudoku
    [ 0, 0, 3,  0, 2, 0,  6, 0, 0
    , 9, 0, 0,  3, 0, 5,  0, 0, 1
    , 0, 0, 1,  8, 0, 6,  4, 0, 0

    , 0, 0, 8,  1, 0, 2,  9, 0, 0
    , 7, 0, 0,  0, 0, 0,  0, 0, 8
    , 0, 0, 6,  7, 0, 8,  2, 0, 0

    , 0, 0, 2,  6, 0, 9,  5, 0, 0
    , 8, 0, 0,  2, 0, 3,  0, 0, 9
    , 0, 0, 5,  0, 1, 0,  3, 0, 0
    ]


newtype SudokuSet = SudokuSet { unSudokuSet :: U.Vector Bit
                              } deriving (Show, Eq)

intersect :: SudokuSet -> SudokuSet -> SudokuSet
intersect (SudokuSet a) (SudokuSet b) = SudokuSet $ zipBits (.&.) a b
{-# INLINE intersect #-}

instance Semigroup SudokuSet where
  (<>) = intersect

instance Monoid SudokuSet where
  mempty = SudokuSet $ U.replicate 9 (Bit True)


-- SudokuXPage represents the possible values for a cell in any boxes,
-- any rows, or any columns.
-- Any Sudoku puzzle has three SudokuPage, one for the columns, one for the
-- rows, and one for the boxes.
-- To calculate the possible values a cell can take, query the three
-- SudokuXPages and intersect them.
-- The pages are stored as flat vectors in a way that is best explained in an
-- example.
-- RowPage $ U.fromList [r1b1, r1b2, r1b3..], where rxbd is a boolean
-- indicating if d is still available in row x.
-- It is stored this way to allow for O(1) no-copy slicing instead of O(n)
-- backpermute.

newtype SudokuRowPage = SudokuRowPage { unSudokuRowPage :: U.Vector Bit
                                      } deriving (Show, Eq)

sudokuRowPage :: Sudoku -> SudokuRowPage
sudokuRowPage s = SudokuRowPage $ U.create go
  where
    updateList = concatMap genList [0..8]
      where
        genList r = map ((r,) . fromIntegral)
            . U.toList
            . U.filter (/= 0)
            . unSudokuSlice
            $ s `row` r
    go :: forall s. ST s (MU.MVector s Bit)
    go = do
        mu <- MU.replicate 81 (Bit True)
        forM_ updateList (\ (r, d) -> do
          let i = 9*r + (d-1)
          MU.write mu i (Bit False)
                         )
        return mu

instance SudokuShaped SudokuRowPage where
  type Value SudokuRowPage = SudokuSet
  p ! i = SudokuSet $ U.slice (9 * rowIndex i) 9 $ unSudokuRowPage p
  update p xs = SudokuRowPage $ U.modify go (unSudokuRowPage p)
    where
      updateList :: [(Int, Int)]
      updateList = map (bimap rowIndex fromIntegral) xs

      go :: forall s. MU.MVector s Bit -> ST s ()
      go mu = forM_ updateList (\ (r, d) -> do
          let i = 9*r + (d-1)
          MU.write mu i (Bit False)
                               )


newtype SudokuColPage = SudokuColPage { unSudokuColPage :: U.Vector Bit
                                      } deriving (Show, Eq)

sudokuColPage :: Sudoku -> SudokuColPage
sudokuColPage s = SudokuColPage $ U.create go
  where
    updateList = concatMap genList [0..8]
      where
        genList c = map ((c,) . fromIntegral)
            . U.toList
            . U.filter (/= 0)
            . unSudokuSlice
            $ s `col` c
    go :: forall s. ST s (MU.MVector s Bit)
    go = do
        mu <- MU.replicate 81 (Bit True)
        forM_ updateList (\ (c, d) -> do
          let i = 9*c + (d-1)
          MU.write mu i (Bit False)
                         )
        return mu

instance SudokuShaped SudokuColPage where
  type Value SudokuColPage = SudokuSet
  p ! i = SudokuSet $ U.slice (9 * colIndex i) 9 $ unSudokuColPage p
  update p xs = SudokuColPage $ U.modify go (unSudokuColPage p)
    where
      updateList :: [(Int, Int)]
      updateList = map (bimap colIndex fromIntegral) xs

      go :: forall s. MU.MVector s Bit -> ST s ()
      go mu = forM_ updateList (\ (c, d) -> do
          let i = 9*c + (d-1)
          MU.write mu i (Bit False)
                               )


newtype SudokuBoxPage = SudokuBoxPage { unSudokuBoxPage :: U.Vector Bit
                                      } deriving (Show, Eq)

sudokuBoxPage :: Sudoku -> SudokuBoxPage
sudokuBoxPage s = SudokuBoxPage $ U.create go
  where
    updateList = concatMap genList [0..8]
      where
        genList b = map ((b,) . fromIntegral)
            . U.toList
            . U.filter (/= 0)
            . unSudokuSlice
            $ s `box` b
    go :: forall s. ST s (MU.MVector s Bit)
    go = do
        mu <- MU.replicate 81 (Bit True)
        forM_ updateList (\ (b, d) -> do
          let i = 9*b + (d-1)
          MU.write mu i (Bit False)
                         )
        return mu

instance SudokuShaped SudokuBoxPage where
  type Value SudokuBoxPage = SudokuSet
  p ! i = SudokuSet $ U.slice (9 * boxIndex i) 9 $ unSudokuBoxPage p
  update p xs = SudokuBoxPage $ U.modify go (unSudokuBoxPage p)
    where
      updateList :: [(Int, Int)]
      updateList = map (bimap boxIndex fromIntegral) xs

      go :: forall s. MU.MVector s Bit -> ST s ()
      go mu = forM_ updateList (\ (b, d) -> do
          let i = 9*b + (d-1)
          MU.write mu i (Bit False)
                               )


data SudokuPage = SudokuPage { rowPage :: {-# UNPACK #-} !SudokuRowPage
                             , colPage :: {-# UNPACK #-} !SudokuColPage
                             , boxPage :: {-# UNPACK #-} !SudokuBoxPage
                             } deriving (Show, Eq)

sudokuPage :: Sudoku -> SudokuPage
sudokuPage s = SudokuPage { rowPage = sudokuRowPage s
                          , colPage = sudokuColPage s
                          , boxPage = sudokuBoxPage s
                          }

instance SudokuShaped SudokuPage where
  type Value SudokuPage = SudokuSet
  p ! i = rowPage p ! i <> colPage p ! i <> boxPage p ! i
  update s xs = SudokuPage { rowPage = update (rowPage s) xs
                           , colPage = update (colPage s) xs
                           , boxPage = update (boxPage s) xs
                           }


data SudokuState = SudokuState { board :: {-# UNPACK #-} !Sudoku
                               , page  :: {-# UNPACK #-} !SudokuPage
                               } deriving (Show, Eq)

sudokuState :: Sudoku -> SudokuState
sudokuState s = SudokuState { board = s
                            , page = sudokuPage s
                            }

instance SudokuShaped SudokuState where
  type Value SudokuState = (Int8, SudokuSet)
  s ! i = (board s ! i, page s ! i)
  update s xs = SudokuState { board = update (board s) xs
                            , page = update (page s) xs
                            }


data SudokuError i = NoChoices i
                   | NoDeduce
                   | Completed Sudoku
                   deriving (Show, Eq)

type SudokuProcessor i = ExceptT (SudokuError i) (State SudokuState)

availableNum :: (SudokuIndex i) => i -> SudokuProcessor i [Int8]
availableNum p = do
    (n, set) <- gets (! p)
    if n == 0
    then let candidates = map ((+1) . fromIntegral) . listBits . unSudokuSet $ set
          in case candidates of
            [] -> throwError (NoChoices p)
            _  -> return candidates
    else return []


checkCompleted :: SudokuProcessor i ()
checkCompleted = do
    completed <- gets (U.notElem 0 . unSudoku . board)
    when completed $ do
        b <- gets board
        throwError $ Completed b


deduce :: SudokuProcessor Row Sudoku
deduce = do
    checkCompleted
    updates <- mapMaybe (traverse onlyOneChoice)
        . zip rowIndices
        <$> traverse availableNum rowIndices
    if null updates
    then throwError NoDeduce
    else maybe
            (do
                modify' (`update` updates)
                gets board
            )
            (throwError . NoChoices)
            (isConsistent updates)
  where
    onlyOneChoice :: [a] -> Maybe a
    onlyOneChoice [x] = Just x
    onlyOneChoice _  = Nothing
    -- isConsistent v returns Nothing if the update list is consistent,
    -- and Just a if it is not, where a is the address of an inconsistency.
    -- This is necessary because we do the deduction in effectively in parallel
    -- and we make guesses instead of pure deduction.
    -- The deductions are made in parallel in the sense that the update list
    -- is generated before the state is updated.
    -- If the board is correct but partially fill, then the checks always pass.
    -- However, if we have guessed incorrectly then the checks would be necessary
    -- to prevent incorrect deductions.

    isConsistent :: [(Row, Int8)] -> Maybe Row
    isConsistent us = isConsistentRow us
        <|> isConsistentCol us
        <|> isConsistentBox us

    isConsistentRow :: [(Row, Int8)] -> Maybe Row
    isConsistentRow us = foldr go Nothing $ zip us (tail us)
      where
        go ((ax@(Row (rx, _)), dx), (Row (ry, _), dy)) acc
          | rx == ry && dx == dy = Just ax
          | otherwise = acc

    isConsistentCol :: [(Row, Int8)] -> Maybe Row
    isConsistentCol us = foldr go Nothing
                       . (\ u -> zip u (tail u))
                       . sort
                       $ map (first byCol) us
      where
        go ((ax@(Col (cx, _)), dx), (Col (cy, _), dy)) acc
          | cx == cy && dx == dy = Just (byRow ax)
          | otherwise = acc

    isConsistentBox :: [(Row, Int8)] -> Maybe Row
    isConsistentBox us = foldr go Nothing
                       . (\ u -> zip u (tail u))
                       . sort
                       $ map (first byBox) us
      where
        go ((ax@(Box (bx, _)), dx), (Box (by, _), dy)) acc
          | bx == by && dx == dy = Just (byRow ax)
          | otherwise = acc

deduceAll :: SudokuProcessor Row ()
deduceAll = deduce >> deduceAll

guess :: (SudokuIndex i) => SudokuChoice i -> SudokuProcessor Row ()
guess p = modify' (`update` [p])

fill :: SudokuProcessor Row ()
fill = do
    deduceAll `catchError` continueOnNoDeduce
    save <- get
    (r, cs) <- findGoodCell
        . filter (not . null . snd)
        . zip rowIndices
        <$> traverse availableNum rowIndices
    -- We are abusing error catching here.
    -- We try each choice in turn.
    -- If a choice results in a completed puzzle, use the semantics of ExceptT
    -- to exit early.
    -- Otherwise, try the next choice.
    -- If all choices fail, throw an NoChoices to pass it up the stack.
    forM_ cs (\ c -> do
        let revertOnFail e = case e of
                Completed s -> throwError $ Completed s
                _           -> put save
        (guess (r, c) >> fill) `catchError` revertOnFail
             )
    throwError $ NoChoices r
  where
    continueOnNoDeduce e = case e of
        NoDeduce -> return ()
        _        -> throwError e
    -- A good cell is a cell that has a minimum amount of choices.
    -- After deduceAll, all cells must have at least two choices.
    -- If we find a cell with exactly two choices, we can exit early.
    -- findGoodCell makes more comparison than necessary.
    -- It early exits when a cell with two choices is encountered but still
    -- makes unnecessary comparisons with elements that come before it.
    findGoodCell :: [(Row, [Int8])] -> (Row, [Int8])
    findGoodCell = foldr1 go
      where
        go x@(_, ds1) acc@(_, ds2) =
            if isGood ds1
            then x
            else case compareLength ds1 ds2 of
                LT -> x
                _  -> acc
          where
            isGood [_, _] = True
            isGood _ = False


-- fill :: SudokuProcessor ()
-- fill = do
--     deduceAll `catchError` continueOnNoDeduce
--     save <- get
--     sudokuPage <- V.zip sudokuIndices <$> traverse availableNum sudokuIndices
--     let candidates = V.filter ((/= 0) . fst) $ toFst (length . snd) <$> sudokuPage
--         (a, cs) = snd $ findGoodCell candidates
--     -- We are abusing error catching here.
--     -- We try each choice in turn.
--     -- If a choice results in a completed puzzle, use the semantics of ExceptT
--     -- to exit early.
--     -- Otherwise, try the next choice.
--     -- If all choices fail, throw an NoChoices to pass it up the stack.
--     forM_ cs (\ c -> do
--         let revertOnFail e = case e of
--                 Completed s -> throwError $ Completed s
--                 _           -> put save
--         (guess (a, c) >> fill) `catchError` revertOnFail
--              )
--     throwError $ NoChoices a
--   where
--     continueOnNoDeduce e = case e of
--         NoDeduce -> return ()
--         _        -> throwError e
--     -- A good cell is a cell that has a minimum amount of choices.
--     -- After deduceAll, all cells must at least have two choices.
--     -- If we find a cell with exactly two choices, we can exit early.
--     findGoodCell xs = foldr1 go xs
--       where
--         go x@(lx, _) acc@(ly, _)
--           | lx == 2   = x
--           | lx < ly   = x
--           | otherwise = acc
-- 
-- 

groupsOf :: Int -> [a] -> [[a]]
groupsOf _ [] = []
groupsOf n xs = as : groupsOf n bs
    where
      (as, bs) = splitAt n xs

trimFile :: [String] -> [String]
trimFile = dropEvery 10
  where
    dropEvery _ [] = []
    dropEvery n (_:xs) = as ++ dropEvery n bs
      where
        (as, bs) = splitAt (n-1) xs

parseSudoku :: [String] -> SudokuState
parseSudoku = sudokuState . sudoku . map (fromIntegral . digitToInt) . concat

extractor :: Either (SudokuError i) () -> Int
extractor (Left (Completed s)) = toInt $ U.slice 0 3 $ unSudoku s
  where
    toInt :: U.Vector Int8 -> Int
    toInt = U.foldl' (\ acc d -> acc*10 + fromIntegral d) 0
extractor _ = errorWithoutStackTrace "extractor: failed to extract"


main :: IO ()
main = do
    file <- readFile "p096_sudoku.txt"
    let sudokuList :: [SudokuState]
        sudokuList = map parseSudoku . groupsOf 9 . trimFile . lines $ file
    print $ sum $ map (extractor . evalState (runExceptT fill)) sudokuList

